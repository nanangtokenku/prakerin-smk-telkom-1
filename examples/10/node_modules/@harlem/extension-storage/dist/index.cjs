"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  default: () => storageExtension
});
module.exports = __toCommonJS(src_exports);

// src/constants.ts
var SENDER = "extension:storage";
var MUTATIONS = {
  sync: "extension:storage:sync"
};

// src/index.ts
var import_core = require("@harlem/core");
var import_utilities = require("@harlem/utilities");
function getOptions(options) {
  return {
    type: "local",
    prefix: "harlem",
    sync: true,
    restore: false,
    include: "*",
    exclude: [],
    serialiser: (state) => JSON.stringify(state),
    parser: (value) => JSON.parse(value),
    branch: import_utilities.functionIdentity,
    ...options
  };
}
function storageExtension(options) {
  const _options = getOptions(options);
  const {
    type,
    prefix,
    sync,
    restore,
    include,
    exclude,
    serialiser,
    parser,
    branch
  } = _options;
  return (store) => {
    if (store.flags.has("ssr:server")) {
      const noop = () => {
      };
      return {
        startStorageSync: noop,
        stopStorageSync: noop,
        clearStorage: noop,
        restoreStorage: noop
      };
    }
    store.register("extensions", "storage", () => _options);
    const {
      value,
      getNodes,
      resetNodes
    } = (0, import_utilities.objectTrace)();
    const storage = type === "session" ? sessionStorage : localStorage;
    const storageKey = prefix ? `${prefix}:${store.name}` : store.name;
    const mutationFilter = (0, import_utilities.matchGetFilter)({
      include,
      exclude
    });
    resetNodes();
    branch(value);
    function startStorageWrite() {
      store.on(import_core.EVENTS.mutation.success, (event) => {
        if (!event || event.data.name === MUTATIONS.sync || !mutationFilter(event.data.name)) {
          return;
        }
        try {
          const state = (0, import_utilities.objectFromPath)(store.state, getNodes());
          storage.setItem(storageKey, serialiser(state));
        } catch (e) {
          console.warn("Failed to write to storage");
        }
      });
    }
    function syncStorage(value2) {
      store.write(MUTATIONS.sync, SENDER, (state) => (0, import_utilities.objectSet)(state, getNodes(), parser(value2)));
    }
    function listener({ key, storageArea, newValue }) {
      if (storageArea === storage && key === storageKey && newValue) {
        syncStorage(newValue);
      }
    }
    function startStorageSync() {
      window.addEventListener("storage", listener);
    }
    function stopStorageSync() {
      window.removeEventListener("storage", listener);
    }
    function clearStorage() {
      storage.removeItem(storageKey);
    }
    function restoreStorage() {
      const value2 = storage.getItem(storageKey);
      if (!(0, import_utilities.typeIsNil)(value2)) {
        syncStorage(value2);
      }
    }
    store.once(import_core.EVENTS.store.created, () => {
      startStorageWrite();
      if (sync) {
        startStorageSync();
      }
      if (restore) {
        restoreStorage();
      }
    });
    store.once(import_core.EVENTS.store.destroyed, () => stopStorageSync());
    return {
      startStorageSync,
      stopStorageSync,
      clearStorage,
      restoreStorage
    };
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
