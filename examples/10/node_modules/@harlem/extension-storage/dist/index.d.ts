import { BaseState, ReadState, BranchAccessor, InternalStore } from '@harlem/core';
import { Matchable } from '@harlem/utilities';

type StorageType = 'local' | 'session';
interface Options<TState extends BaseState> extends Matchable {
    type: StorageType;
    prefix: string;
    sync: boolean;
    restore: boolean;
    serialiser(state: ReadState<TState>): string;
    parser(value: string): TState;
    branch: BranchAccessor<TState, unknown>;
}

declare function storageExtension<TState extends BaseState>(options?: Partial<Options<TState>>): (store: InternalStore<TState>) => {
    startStorageSync: () => void;
    stopStorageSync: () => void;
    clearStorage: () => void;
    restoreStorage: () => void;
};

export { Options, StorageType, storageExtension as default };
