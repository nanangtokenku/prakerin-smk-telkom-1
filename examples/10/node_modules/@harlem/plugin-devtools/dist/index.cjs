"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  default: () => createDevtoolsPlugin
});
module.exports = __toCommonJS(src_exports);

// src/constants.ts
var SENDER = "plugin:devtools";
var DEVTOOLS_ID = "harlem";
var ALL_STORES_ID = "$all";
var OPTIONS = {
  label: "Harlem",
  color: 4244621
};
var MUTATIONS = {
  set: "plugin:devtools:set"
};

// src/index.ts
var import_core = require("@harlem/core");
var import_devtools_api = require("@vue/devtools-api");
function stringComparitor(valueA, valueB) {
  return valueA.localeCompare(valueB);
}
function getInspectorTreeHook(application, stores) {
  return (payload) => {
    const {
      app,
      inspectorId
    } = payload;
    if (app !== application || inspectorId !== DEVTOOLS_ID || stores.size === 0) {
      return;
    }
    const children = Array.from(stores.keys()).sort(stringComparitor).map((name) => ({
      id: name,
      label: name
    }));
    payload.rootNodes = [
      {
        children,
        id: ALL_STORES_ID,
        label: "Stores"
      }
    ];
  };
}
function getRegistrationValue(producer) {
  try {
    return producer();
  } catch (e) {
    return "Failed to compute value...";
  }
}
function getStoreSnapshot(store) {
  return Object.entries(store.registrations).reduce((output, [type, registrations]) => {
    output[type] = Array.from(registrations).sort(([valueA], [valueB]) => stringComparitor(valueA, valueB)).map(([key, { type: type2, producer }]) => ({
      key,
      value: getRegistrationValue(producer),
      editable: false,
      objectType: type2
    }));
    return output;
  }, {
    state: [
      {
        key: store.name,
        value: store.state,
        editable: true,
        objectType: "reactive"
      }
    ]
  });
}
function getStoreSnapshots(stores) {
  return stores.reduce((output, store) => {
    if (!store) {
      return output;
    }
    const snapshot = getStoreSnapshot(store);
    return Object.entries(snapshot).reduce((merges, [key, value]) => {
      merges[key] = (merges[key] || []).concat(value);
      return merges;
    }, {});
  }, {});
}
function getInspectorStateHook(application, stores) {
  return (payload) => {
    const {
      app,
      inspectorId,
      nodeId
    } = payload;
    if (app !== application || inspectorId !== DEVTOOLS_ID || stores.size === 0) {
      return;
    }
    let internalStores = [stores.get(nodeId) || stores.values().next().value];
    if (nodeId === ALL_STORES_ID) {
      internalStores = Array.from(stores.values());
    }
    if (internalStores.length > 0) {
      payload.state = getStoreSnapshots(internalStores);
    }
  };
}
function getInspectorEditHook(application, stores) {
  return (payload) => {
    const {
      app,
      inspectorId,
      nodeId,
      path,
      state,
      set
    } = payload;
    if (app !== application || inspectorId !== DEVTOOLS_ID || stores.size === 0) {
      return;
    }
    const root = path.shift();
    const storeId = nodeId === ALL_STORES_ID ? root || nodeId : nodeId;
    const store = stores.get(storeId);
    if (!store) {
      return;
    }
    store.write(MUTATIONS.set, SENDER, (_state) => set(_state, path, state.value));
  };
}
function getMutationHook(api, logType) {
  return (payload) => {
    if (!payload) {
      return;
    }
    const {
      store
    } = payload;
    api.sendInspectorState(DEVTOOLS_ID);
    api.addTimelineEvent({
      layerId: DEVTOOLS_ID,
      event: {
        logType,
        title: "Mutation",
        subtitle: store,
        groupId: store,
        time: api.now(),
        data: payload,
        meta: {
          store
        }
      }
    });
  };
}
function createDevtoolsPlugin(options) {
  const {
    label,
    color
  } = {
    ...OPTIONS,
    ...options
  };
  return (app, eventBus, stores) => {
    const inspectorTreeHook = getInspectorTreeHook(app, stores);
    const inspectorStateHook = getInspectorStateHook(app, stores);
    const inspectorEditHook = getInspectorEditHook(app, stores);
    const descriptor = {
      app,
      label,
      id: DEVTOOLS_ID,
      logo: "https://harlemjs.com/assets/images/favicon.png",
      homepage: "https://harlemjs.com",
      packageName: "@harlem/plugin-devtools"
    };
    (0, import_devtools_api.setupDevtoolsPlugin)(descriptor, (api) => {
      const successMutationHook = getMutationHook(api);
      const errorMutationHook = getMutationHook(api, "error");
      api.addInspector({
        label,
        id: DEVTOOLS_ID,
        icon: "source",
        treeFilterPlaceholder: "Search stores",
        stateFilterPlaceholder: "Search state",
        nodeActions: [
          {
            icon: "replay",
            tooltip: "Reset store",
            action: (nodeId) => eventBus.emit(import_core.EVENTS.devtools.reset, {
              sender: SENDER,
              store: nodeId,
              data: nodeId
            })
          }
        ]
      });
      api.addTimelineLayer({
        label,
        color,
        id: DEVTOOLS_ID,
        skipScreenshots: true
      });
      api.on.getInspectorTree(inspectorTreeHook);
      api.on.getInspectorState(inspectorStateHook);
      api.on.editInspectorState(inspectorEditHook);
      eventBus.on(import_core.EVENTS.mutation.success, successMutationHook);
      eventBus.on(import_core.EVENTS.mutation.error, errorMutationHook);
      eventBus.on(import_core.EVENTS.devtools.update, () => {
        api.sendInspectorTree(DEVTOOLS_ID);
        api.sendInspectorState(DEVTOOLS_ID);
      });
    });
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
