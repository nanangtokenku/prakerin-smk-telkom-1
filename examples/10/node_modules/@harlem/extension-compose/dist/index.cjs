"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  default: () => composeExtension,
  useListeners: () => useListeners
});
module.exports = __toCommonJS(src_exports);

// src/constants.ts
var SENDER = "extension:compose";

// src/index.ts
var import_vue = require("vue");
var import_utilities = require("@harlem/utilities");
function useListeners(listeners) {
  const _listeners = [].concat(
    (0, import_utilities.typeIsFunction)(listeners) ? listeners() : listeners
  );
  (0, import_vue.onUnmounted)(() => _listeners.forEach(({ dispose }) => dispose()));
}
function composeExtension() {
  return (store) => {
    store.register("extensions", "compose", () => "No options specified");
    const {
      value,
      getNodes,
      resetNodes
    } = (0, import_utilities.objectTrace)();
    function useState(accessor, mutationName) {
      accessor(value);
      const nodes = getNodes();
      const name = mutationName || `extension:compose:${(0, import_utilities.objectToPath)(["root", ...nodes])}`;
      const key = nodes.pop();
      const parent = (state) => (0, import_utilities.objectFromPath)(state, nodes);
      resetNodes();
      if ((0, import_utilities.typeIsNil)(key)) {
        throw new Error("A valid property must be used");
      }
      const getter = () => parent(store.state)[key];
      const setter = (value2) => store.write(name, SENDER, (state) => {
        parent(state)[key] = (0, import_utilities.typeIsFunction)(value2) ? value2(getter()) : value2;
      });
      return [
        getter,
        setter
      ];
    }
    function computeState(accessor, mutationName) {
      const [
        getter,
        setter
      ] = useState(accessor, mutationName);
      return (0, import_vue.computed)({
        get: () => getter(),
        set: (value2) => setter(value2)
      });
    }
    return {
      useState,
      computeState,
      useListeners
    };
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  useListeners
});
