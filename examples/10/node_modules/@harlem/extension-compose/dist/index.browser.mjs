// src/constants.ts
var SENDER = "extension:compose";

// src/index.ts
import {
  computed,
  onUnmounted
} from "vue";
import {
  objectFromPath,
  objectToPath,
  objectTrace,
  typeIsFunction,
  typeIsNil
} from "@harlem/utilities";
function useListeners(listeners) {
  const _listeners = [].concat(
    typeIsFunction(listeners) ? listeners() : listeners
  );
  onUnmounted(() => _listeners.forEach(({ dispose }) => dispose()));
}
function composeExtension() {
  return (store) => {
    store.register("extensions", "compose", () => "No options specified");
    const {
      value,
      getNodes,
      resetNodes
    } = objectTrace();
    function useState(accessor, mutationName) {
      accessor(value);
      const nodes = getNodes();
      const name = mutationName || `extension:compose:${objectToPath(["root", ...nodes])}`;
      const key = nodes.pop();
      const parent = (state) => objectFromPath(state, nodes);
      resetNodes();
      if (typeIsNil(key)) {
        throw new Error("A valid property must be used");
      }
      const getter = () => parent(store.state)[key];
      const setter = (value2) => store.write(name, SENDER, (state) => {
        parent(state)[key] = typeIsFunction(value2) ? value2(getter()) : value2;
      });
      return [
        getter,
        setter
      ];
    }
    function computeState(accessor, mutationName) {
      const [
        getter,
        setter
      ] = useState(accessor, mutationName);
      return computed({
        get: () => getter(),
        set: (value2) => setter(value2)
      });
    }
    return {
      useState,
      computeState,
      useListeners
    };
  };
}
export {
  composeExtension as default,
  useListeners
};
