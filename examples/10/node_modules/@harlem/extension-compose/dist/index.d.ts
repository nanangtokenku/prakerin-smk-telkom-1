import * as vue from 'vue';
import { DeepReadonly } from 'vue';
import { BaseState, InternalStore } from '@harlem/core';
import { Disposable } from '@harlem/utilities';

type Accessor<TState, TValue> = (state: TState) => TValue;
type Producer<TState, TValue> = (state: DeepReadonly<TState>) => TValue;
type Getter<TValue> = () => DeepReadonly<TValue>;
type Setter<TValue> = (value: TValue | Producer<TValue, TValue>) => void;
type ListenersAccessor = Disposable | Disposable[] | (() => Disposable | Disposable[]);

declare function useListeners(listeners: ListenersAccessor): void;
declare function composeExtension<TState extends BaseState>(): (store: InternalStore<TState>) => {
    useState: <TValue>(accessor: Accessor<TState, TValue>, mutationName?: string) => [Getter<TValue>, Setter<TValue>];
    computeState: <TValue_1>(accessor: Accessor<TState, TValue_1>, mutationName?: string) => vue.WritableComputedRef<TValue_1>;
    useListeners: typeof useListeners;
};

export { Accessor, Getter, ListenersAccessor, Producer, Setter, composeExtension as default, useListeners };
