import {
  fromPath,
  isFunction,
  isNil,
  toPath,
  traceObject
} from "./chunk-6VBQTTIA.js";
import {
  computed,
  onUnmounted
} from "./chunk-QO6ZHO7P.js";

// node_modules/@harlem/extension-compose/dist/index.bundler.mjs
var SENDER = "extension:compose";
function useListeners(listeners) {
  const _listeners = [].concat(
    isFunction(listeners) ? listeners() : listeners
  );
  onUnmounted(() => _listeners.forEach(({ dispose }) => dispose()));
}
function composeExtension() {
  return (store) => {
    store.register("extensions", "compose", () => "No options specified");
    const {
      value,
      getNodes,
      resetNodes
    } = traceObject();
    function useState(accessor, mutationName) {
      accessor(value);
      const nodes = getNodes();
      const name = mutationName || `extension:compose:${toPath(["root", ...nodes])}`;
      const key = nodes.pop();
      const parent = (state) => fromPath(state, nodes);
      resetNodes();
      if (isNil(key)) {
        throw new Error("A valid property must be used");
      }
      const getter = () => parent(store.state)[key];
      const setter = (value2) => store.write(name, SENDER, (state) => {
        parent(state)[key] = isFunction(value2) ? value2(getter()) : value2;
      });
      return [
        getter,
        setter
      ];
    }
    function computeState(accessor, mutationName) {
      const [
        getter,
        setter
      ] = useState(accessor, mutationName);
      return computed({
        get: () => getter(),
        set: (value2) => setter(value2)
      });
    }
    return {
      useState,
      computeState,
      useListeners
    };
  };
}
export {
  composeExtension as default,
  useListeners
};
//# sourceMappingURL=@harlem_extension-compose.js.map
