{
  "version": 3,
  "sources": ["../../@harlem/task/dist/index.bundler.mjs", "../../@harlem/extension-action/dist/index.bundler.mjs"],
  "sourcesContent": ["// src/errors.ts\nvar TaskAbortError = class extends Error {\n  constructor(reason) {\n    super(\"Task aborted\");\n    this.reason = reason;\n  }\n};\n\n// src/index.ts\nvar Task = class extends Promise {\n  constructor(executor, controller = new AbortController()) {\n    if (controller.signal.aborted) {\n      throw new Error(\"Cannot attach task to an already aborted controller\");\n    }\n    const listeners = /* @__PURE__ */ new Set();\n    let isAborting = false;\n    let finaliser;\n    super((_resolve, _reject) => {\n      const resolve = (value) => execResolution(() => _resolve(value));\n      const reject = (reason) => execResolution(() => _reject(reason));\n      const onAbort = (callback) => listeners.add(callback);\n      const dispose = () => controller.signal.removeEventListener(\"abort\", abort);\n      const execResolution = (resolution) => {\n        if (isAborting) {\n          finaliser = finaliser || resolution;\n        } else {\n          dispose();\n          resolution();\n        }\n      };\n      const abort = () => {\n        isAborting = true;\n        listeners.forEach((listener) => {\n          try {\n            listener(this.abortReason);\n          } finally {\n            listeners.delete(listener);\n          }\n        });\n        isAborting = false;\n        const finalise = finaliser || ((reason) => _reject(new TaskAbortError(reason)));\n        dispose();\n        finalise(this.abortReason);\n      };\n      controller.signal.addEventListener(\"abort\", abort);\n      executor(resolve, reject, controller, onAbort);\n    });\n    this.controller = controller;\n  }\n  static isTask(value) {\n    return value instanceof Task;\n  }\n  get signal() {\n    return this.controller.signal;\n  }\n  get hasAborted() {\n    return this.signal.aborted;\n  }\n  abort(reason) {\n    this.abortReason = reason;\n    this.controller.abort();\n    return this;\n  }\n};\nexport {\n  TaskAbortError,\n  Task as default\n};\n", "// src/index.ts\nimport Task from \"@harlem/task\";\n\n// src/constants.ts\nvar SENDER = \"extension:action\";\n\n// src/index.ts\nimport {\n  reactive,\n  watchEffect\n} from \"vue\";\n\n// src/utilities.ts\nfunction getAbortMessage(name, reason) {\n  return `Action ${name} has been cancelled. Reason: ${reason || \"unknown\"}`;\n}\n\n// src/errors.ts\nvar ActionAbortError = class extends Error {\n  constructor(name, instanceId, reason) {\n    super(getAbortMessage(name, reason));\n    this.name = name;\n    this.instanceId = instanceId;\n    this.reason = reason;\n  }\n};\n\n// src/index.ts\nimport {\n  EVENTS\n} from \"@harlem/core\";\nimport {\n  typeIsFunction\n} from \"@harlem/utilities\";\nvar ABORT_STRATEGY = {\n  error: (name, id, resolve, reject, reason) => {\n    reject(new ActionAbortError(name, id, reason));\n  },\n  warn: (name, id, resolve, reject, reason) => {\n    console.warn(getAbortMessage(name, reason));\n    resolve();\n  }\n};\nfunction getOptions(options) {\n  return {\n    concurrent: true,\n    ...options,\n    strategies: {\n      abort: ABORT_STRATEGY.error,\n      ...options == null ? void 0 : options.strategies\n    }\n  };\n}\nfunction actionExtension(options) {\n  const rootOptions = getOptions(options);\n  return (store) => {\n    store.register(\"extensions\", \"action\", () => rootOptions);\n    const actionTasks = /* @__PURE__ */ new Map();\n    const actionState = reactive(/* @__PURE__ */ new Map());\n    function setActionState(name) {\n      const state = {\n        runCount: 0,\n        instances: /* @__PURE__ */ new Map(),\n        errors: /* @__PURE__ */ new Map()\n      };\n      actionState.set(name, state);\n      return state;\n    }\n    function getActionState(name) {\n      return actionState.get(name) || setActionState(name);\n    }\n    function registerAction(name, options2 = {}) {\n      store.register(\"actions\", name, () => options2);\n      setActionState(name);\n      const tasks = /* @__PURE__ */ new Set();\n      actionTasks.set(name, tasks);\n      return {\n        tasks\n      };\n    }\n    function action(name, body, options2) {\n      const {\n        tasks\n      } = registerAction(name, options2);\n      const {\n        concurrent,\n        autoClearErrors,\n        strategies\n      } = {\n        autoClearErrors: true,\n        ...rootOptions,\n        ...options2,\n        strategies: {\n          ...rootOptions.strategies,\n          ...options2 == null ? void 0 : options2.strategies\n        }\n      };\n      const mutate = (mutator) => store.write(name, SENDER, mutator);\n      const incrementRunCount = () => getActionState(name).runCount += 1;\n      return (payload, controller) => {\n        const {\n          instances,\n          errors\n        } = getActionState(name);\n        if (!concurrent || typeIsFunction(concurrent) && !concurrent(payload, Array.from(instances.values()))) {\n          abortAction(name, \"New instance started on non-concurrent action\");\n        }\n        if (autoClearErrors) {\n          errors.clear();\n        }\n        const task = new Task(async (resolve, reject, controller2, onAbort) => {\n          var _a;\n          const id = Symbol(name);\n          const complete = () => (tasks.delete(task), instances.delete(id));\n          const fail = (reason) => strategies.abort(name, id, resolve, reject, reason);\n          let result;\n          const trigger = (event) => store.emit(event, SENDER, {\n            name,\n            payload,\n            result\n          });\n          onAbort((reason) => (complete(), fail(reason)));\n          instances.set(id, payload);\n          trigger(EVENTS.action.before);\n          try {\n            const producedPayload = (_a = store.producers.payload(payload)) != null ? _a : payload;\n            result = await body(producedPayload, mutate, controller2, onAbort);\n            trigger(EVENTS.action.success);\n            incrementRunCount();\n            resolve(result);\n          } catch (error) {\n            if (isActionAbortError(error)) {\n              return fail(error.message);\n            }\n            if (error instanceof DOMException) {\n              return fail(\"Network request cancelled\");\n            }\n            trigger(EVENTS.action.error);\n            incrementRunCount();\n            errors.set(id, error);\n            reject(error);\n          } finally {\n            trigger(EVENTS.action.after);\n            complete();\n          }\n        }, controller);\n        tasks.add(task);\n        return task;\n      };\n    }\n    function hasActionRun(name) {\n      return getActionState(name).runCount > 0;\n    }\n    function isActionRunning(name, predicate) {\n      const payloads = Array.from(getActionState(name).instances.values());\n      return !!payloads.length && (!predicate || payloads.some(predicate));\n    }\n    function isActionFirstRun(name) {\n      return !hasActionRun(name) && isActionRunning(name);\n    }\n    function whenActionIdle(name, predicate, controller) {\n      return new Task((resolve, reject, controller2, onAbort) => {\n        const isComplete = () => !isActionRunning(name, predicate);\n        if (isComplete()) {\n          return resolve();\n        }\n        const unwatch = watchEffect(() => {\n          if (isComplete()) {\n            unwatch();\n            resolve();\n          }\n        });\n        onAbort(() => (unwatch(), resolve()));\n      }, controller);\n    }\n    function hasActionFailed(name) {\n      return !!getActionState(name).errors.size;\n    }\n    function getActionErrors(name) {\n      const errors = Array.from(getActionState(name).errors);\n      return errors.map(([id, error]) => ({\n        id,\n        error\n      }));\n    }\n    function isActionAbortError(value) {\n      return value instanceof ActionAbortError;\n    }\n    function resetActionState(name) {\n      [].concat(name || Array.from(actionState.keys())).forEach((name2) => setActionState(name2));\n    }\n    function abortAction(name, reason) {\n      [].concat(name).forEach((name2) => {\n        const tasks = actionTasks.get(name2);\n        if (tasks == null ? void 0 : tasks.size) {\n          tasks.forEach((task) => {\n            task.abort(reason);\n            tasks.delete(task);\n          });\n        }\n      });\n    }\n    function suppressAbortError(action2) {\n      return (payload, controller) => {\n        return new Task(async (resolve, reject, controller2, onAbort) => {\n          onAbort(() => resolve());\n          try {\n            const result = await action2(payload, controller2);\n            resolve(result);\n          } catch (error) {\n            isActionAbortError(error) ? resolve() : reject(error);\n          }\n        }, controller);\n      };\n    }\n    return {\n      action,\n      abortAction,\n      getActionErrors,\n      hasActionFailed,\n      hasActionRun,\n      isActionAbortError,\n      isActionFirstRun,\n      isActionRunning,\n      resetActionState,\n      suppressAbortError,\n      whenActionIdle\n    };\n  };\n}\nexport {\n  ABORT_STRATEGY,\n  ActionAbortError,\n  actionExtension as default\n};\n"],
  "mappings": ";;;;;;;;;;;;AACA,IAAI,iBAAiB,cAAc,MAAM;AAAA,EACvC,YAAY,QAAQ;AAClB,UAAM,cAAc;AACpB,SAAK,SAAS;AAAA,EAChB;AACF;AAGA,IAAI,OAAO,cAAc,QAAQ;AAAA,EAC/B,YAAY,UAAU,aAAa,IAAI,gBAAgB,GAAG;AACxD,QAAI,WAAW,OAAO,SAAS;AAC7B,YAAM,IAAI,MAAM,qDAAqD;AAAA,IACvE;AACA,UAAM,YAA4B,oBAAI,IAAI;AAC1C,QAAI,aAAa;AACjB,QAAI;AACJ,UAAM,CAAC,UAAU,YAAY;AAC3B,YAAM,UAAU,CAAC,UAAU,eAAe,MAAM,SAAS,KAAK,CAAC;AAC/D,YAAM,SAAS,CAAC,WAAW,eAAe,MAAM,QAAQ,MAAM,CAAC;AAC/D,YAAM,UAAU,CAAC,aAAa,UAAU,IAAI,QAAQ;AACpD,YAAM,UAAU,MAAM,WAAW,OAAO,oBAAoB,SAAS,KAAK;AAC1E,YAAM,iBAAiB,CAAC,eAAe;AACrC,YAAI,YAAY;AACd,sBAAY,aAAa;AAAA,QAC3B,OAAO;AACL,kBAAQ;AACR,qBAAW;AAAA,QACb;AAAA,MACF;AACA,YAAM,QAAQ,MAAM;AAClB,qBAAa;AACb,kBAAU,QAAQ,CAAC,aAAa;AAC9B,cAAI;AACF,qBAAS,KAAK,WAAW;AAAA,UAC3B,UAAE;AACA,sBAAU,OAAO,QAAQ;AAAA,UAC3B;AAAA,QACF,CAAC;AACD,qBAAa;AACb,cAAM,WAAW,cAAc,CAAC,WAAW,QAAQ,IAAI,eAAe,MAAM,CAAC;AAC7E,gBAAQ;AACR,iBAAS,KAAK,WAAW;AAAA,MAC3B;AACA,iBAAW,OAAO,iBAAiB,SAAS,KAAK;AACjD,eAAS,SAAS,QAAQ,YAAY,OAAO;AAAA,IAC/C,CAAC;AACD,SAAK,aAAa;AAAA,EACpB;AAAA,EACA,OAAO,OAAO,OAAO;AACnB,WAAO,iBAAiB;AAAA,EAC1B;AAAA,EACA,IAAI,SAAS;AACX,WAAO,KAAK,WAAW;AAAA,EACzB;AAAA,EACA,IAAI,aAAa;AACf,WAAO,KAAK,OAAO;AAAA,EACrB;AAAA,EACA,MAAM,QAAQ;AACZ,SAAK,cAAc;AACnB,SAAK,WAAW,MAAM;AACtB,WAAO;AAAA,EACT;AACF;;;AC3DA,IAAI,SAAS;AASb,SAAS,gBAAgB,MAAM,QAAQ;AACrC,SAAO,UAAU,oCAAoC,UAAU;AACjE;AAGA,IAAI,mBAAmB,cAAc,MAAM;AAAA,EACzC,YAAY,MAAM,YAAY,QAAQ;AACpC,UAAM,gBAAgB,MAAM,MAAM,CAAC;AACnC,SAAK,OAAO;AACZ,SAAK,aAAa;AAClB,SAAK,SAAS;AAAA,EAChB;AACF;AASA,IAAI,iBAAiB;AAAA,EACnB,OAAO,CAAC,MAAM,IAAI,SAAS,QAAQ,WAAW;AAC5C,WAAO,IAAI,iBAAiB,MAAM,IAAI,MAAM,CAAC;AAAA,EAC/C;AAAA,EACA,MAAM,CAAC,MAAM,IAAI,SAAS,QAAQ,WAAW;AAC3C,YAAQ,KAAK,gBAAgB,MAAM,MAAM,CAAC;AAC1C,YAAQ;AAAA,EACV;AACF;AACA,SAAS,WAAW,SAAS;AAC3B,SAAO;AAAA,IACL,YAAY;AAAA,IACZ,GAAG;AAAA,IACH,YAAY;AAAA,MACV,OAAO,eAAe;AAAA,MACtB,GAAG,WAAW,OAAO,SAAS,QAAQ;AAAA,IACxC;AAAA,EACF;AACF;AACA,SAAS,gBAAgB,SAAS;AAChC,QAAM,cAAc,WAAW,OAAO;AACtC,SAAO,CAAC,UAAU;AAChB,UAAM,SAAS,cAAc,UAAU,MAAM,WAAW;AACxD,UAAM,cAA8B,oBAAI,IAAI;AAC5C,UAAM,cAAc,SAAyB,oBAAI,IAAI,CAAC;AACtD,aAAS,eAAe,MAAM;AAC5B,YAAM,QAAQ;AAAA,QACZ,UAAU;AAAA,QACV,WAA2B,oBAAI,IAAI;AAAA,QACnC,QAAwB,oBAAI,IAAI;AAAA,MAClC;AACA,kBAAY,IAAI,MAAM,KAAK;AAC3B,aAAO;AAAA,IACT;AACA,aAAS,eAAe,MAAM;AAC5B,aAAO,YAAY,IAAI,IAAI,KAAK,eAAe,IAAI;AAAA,IACrD;AACA,aAAS,eAAe,MAAM,WAAW,CAAC,GAAG;AAC3C,YAAM,SAAS,WAAW,MAAM,MAAM,QAAQ;AAC9C,qBAAe,IAAI;AACnB,YAAM,QAAwB,oBAAI,IAAI;AACtC,kBAAY,IAAI,MAAM,KAAK;AAC3B,aAAO;AAAA,QACL;AAAA,MACF;AAAA,IACF;AACA,aAAS,OAAO,MAAM,MAAM,UAAU;AACpC,YAAM;AAAA,QACJ;AAAA,MACF,IAAI,eAAe,MAAM,QAAQ;AACjC,YAAM;AAAA,QACJ;AAAA,QACA;AAAA,QACA;AAAA,MACF,IAAI;AAAA,QACF,iBAAiB;AAAA,QACjB,GAAG;AAAA,QACH,GAAG;AAAA,QACH,YAAY;AAAA,UACV,GAAG,YAAY;AAAA,UACf,GAAG,YAAY,OAAO,SAAS,SAAS;AAAA,QAC1C;AAAA,MACF;AACA,YAAM,SAAS,CAAC,YAAY,MAAM,MAAM,MAAM,QAAQ,OAAO;AAC7D,YAAM,oBAAoB,MAAM,eAAe,IAAI,EAAE,YAAY;AACjE,aAAO,CAAC,SAAS,eAAe;AAC9B,cAAM;AAAA,UACJ;AAAA,UACA;AAAA,QACF,IAAI,eAAe,IAAI;AACvB,YAAI,CAAC,cAAc,WAAe,UAAU,KAAK,CAAC,WAAW,SAAS,MAAM,KAAK,UAAU,OAAO,CAAC,CAAC,GAAG;AACrG,sBAAY,MAAM,+CAA+C;AAAA,QACnE;AACA,YAAI,iBAAiB;AACnB,iBAAO,MAAM;AAAA,QACf;AACA,cAAM,OAAO,IAAI,KAAK,OAAO,SAAS,QAAQ,aAAa,YAAY;AACrE,cAAI;AACJ,gBAAM,KAAK,OAAO,IAAI;AACtB,gBAAM,WAAW,OAAO,MAAM,OAAO,IAAI,GAAG,UAAU,OAAO,EAAE;AAC/D,gBAAM,OAAO,CAAC,WAAW,WAAW,MAAM,MAAM,IAAI,SAAS,QAAQ,MAAM;AAC3E,cAAI;AACJ,gBAAM,UAAU,CAAC,UAAU,MAAM,KAAK,OAAO,QAAQ;AAAA,YACnD;AAAA,YACA;AAAA,YACA;AAAA,UACF,CAAC;AACD,kBAAQ,CAAC,YAAY,SAAS,GAAG,KAAK,MAAM,EAAE;AAC9C,oBAAU,IAAI,IAAI,OAAO;AACzB,kBAAQ,OAAO,OAAO,MAAM;AAC5B,cAAI;AACF,kBAAM,mBAAmB,KAAK,MAAM,UAAU,QAAQ,OAAO,MAAM,OAAO,KAAK;AAC/E,qBAAS,MAAM,KAAK,iBAAiB,QAAQ,aAAa,OAAO;AACjE,oBAAQ,OAAO,OAAO,OAAO;AAC7B,8BAAkB;AAClB,oBAAQ,MAAM;AAAA,UAChB,SAAS,OAAP;AACA,gBAAI,mBAAmB,KAAK,GAAG;AAC7B,qBAAO,KAAK,MAAM,OAAO;AAAA,YAC3B;AACA,gBAAI,iBAAiB,cAAc;AACjC,qBAAO,KAAK,2BAA2B;AAAA,YACzC;AACA,oBAAQ,OAAO,OAAO,KAAK;AAC3B,8BAAkB;AAClB,mBAAO,IAAI,IAAI,KAAK;AACpB,mBAAO,KAAK;AAAA,UACd,UAAE;AACA,oBAAQ,OAAO,OAAO,KAAK;AAC3B,qBAAS;AAAA,UACX;AAAA,QACF,GAAG,UAAU;AACb,cAAM,IAAI,IAAI;AACd,eAAO;AAAA,MACT;AAAA,IACF;AACA,aAAS,aAAa,MAAM;AAC1B,aAAO,eAAe,IAAI,EAAE,WAAW;AAAA,IACzC;AACA,aAAS,gBAAgB,MAAM,WAAW;AACxC,YAAM,WAAW,MAAM,KAAK,eAAe,IAAI,EAAE,UAAU,OAAO,CAAC;AACnE,aAAO,CAAC,CAAC,SAAS,WAAW,CAAC,aAAa,SAAS,KAAK,SAAS;AAAA,IACpE;AACA,aAAS,iBAAiB,MAAM;AAC9B,aAAO,CAAC,aAAa,IAAI,KAAK,gBAAgB,IAAI;AAAA,IACpD;AACA,aAAS,eAAe,MAAM,WAAW,YAAY;AACnD,aAAO,IAAI,KAAK,CAAC,SAAS,QAAQ,aAAa,YAAY;AACzD,cAAM,aAAa,MAAM,CAAC,gBAAgB,MAAM,SAAS;AACzD,YAAI,WAAW,GAAG;AAChB,iBAAO,QAAQ;AAAA,QACjB;AACA,cAAM,UAAU,YAAY,MAAM;AAChC,cAAI,WAAW,GAAG;AAChB,oBAAQ;AACR,oBAAQ;AAAA,UACV;AAAA,QACF,CAAC;AACD,gBAAQ,OAAO,QAAQ,GAAG,QAAQ,EAAE;AAAA,MACtC,GAAG,UAAU;AAAA,IACf;AACA,aAAS,gBAAgB,MAAM;AAC7B,aAAO,CAAC,CAAC,eAAe,IAAI,EAAE,OAAO;AAAA,IACvC;AACA,aAAS,gBAAgB,MAAM;AAC7B,YAAM,SAAS,MAAM,KAAK,eAAe,IAAI,EAAE,MAAM;AACrD,aAAO,OAAO,IAAI,CAAC,CAAC,IAAI,KAAK,OAAO;AAAA,QAClC;AAAA,QACA;AAAA,MACF,EAAE;AAAA,IACJ;AACA,aAAS,mBAAmB,OAAO;AACjC,aAAO,iBAAiB;AAAA,IAC1B;AACA,aAAS,iBAAiB,MAAM;AAC9B,OAAC,EAAE,OAAO,QAAQ,MAAM,KAAK,YAAY,KAAK,CAAC,CAAC,EAAE,QAAQ,CAAC,UAAU,eAAe,KAAK,CAAC;AAAA,IAC5F;AACA,aAAS,YAAY,MAAM,QAAQ;AACjC,OAAC,EAAE,OAAO,IAAI,EAAE,QAAQ,CAAC,UAAU;AACjC,cAAM,QAAQ,YAAY,IAAI,KAAK;AACnC,YAAI,SAAS,OAAO,SAAS,MAAM,MAAM;AACvC,gBAAM,QAAQ,CAAC,SAAS;AACtB,iBAAK,MAAM,MAAM;AACjB,kBAAM,OAAO,IAAI;AAAA,UACnB,CAAC;AAAA,QACH;AAAA,MACF,CAAC;AAAA,IACH;AACA,aAAS,mBAAmB,SAAS;AACnC,aAAO,CAAC,SAAS,eAAe;AAC9B,eAAO,IAAI,KAAK,OAAO,SAAS,QAAQ,aAAa,YAAY;AAC/D,kBAAQ,MAAM,QAAQ,CAAC;AACvB,cAAI;AACF,kBAAM,SAAS,MAAM,QAAQ,SAAS,WAAW;AACjD,oBAAQ,MAAM;AAAA,UAChB,SAAS,OAAP;AACA,+BAAmB,KAAK,IAAI,QAAQ,IAAI,OAAO,KAAK;AAAA,UACtD;AAAA,QACF,GAAG,UAAU;AAAA,MACf;AAAA,IACF;AACA,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACF;",
  "names": []
}
